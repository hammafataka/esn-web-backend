plugins {
    id 'java'
    id 'idea'
    id 'groovy'
    id 'application'
    id 'java-library'
    id 'maven-publish'
    id 'io.freefair.lombok' version '8.6'
    id 'org.springframework.boot' version '3.5.4'
    id "com.google.cloud.tools.jib" version "3.4.4"
    id "com.netflix.nebula.release" version "21.0.0"
    id 'io.spring.dependency-management' version '1.1.6'
}

group = 'dev.mfataka'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

repositories {
    mavenCentral()
}


jib {
    from {
        image = 'registry.access.redhat.com/ubi8/openjdk-21-runtime:1.23-3'
    }
    to {


        def repoEnv = System.getenv('GITHUB_REPOSITORY') // e.g. "hammafataka/esn-web-backend"
        def (owner, repo) = (repoEnv ?: 'hammafataka/esn-web-backend').toLowerCase().split('/')
        image = "ghcr.io/hammafataka/${owner}/${repo}"

        auth {
            username = System.getenv().getOrDefault("GITHUB_ACTOR", "")
            password = System.getenv().getOrDefault("GITHUB_TOKEN", "")
        }
        def formattedVersion= project.version.toString().replace("+", "_")
        tags = ["latest", formattedVersion]
    }
}

dependencies {
    // spring
    implementation 'org.springframework.boot:spring-boot-starter-cache'
    implementation 'org.springframework.boot:spring-boot-starter-mail'
    compileOnly 'com.github.jasync-sql:jasync-mysql:2.2.0'
    implementation 'org.springframework.boot:spring-boot-starter-data-r2dbc'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.security:spring-security-web'
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation "org.springdoc:springdoc-openapi-starter-webmvc-ui:$SPRING_DOC_VERSION"
    implementation 'org.springframework.boot:spring-boot-starter-mail'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'


    // JWT
    implementation "io.jsonwebtoken:jjwt:${JJWT_VERSION}"
    implementation "io.jsonwebtoken:jjwt-api:${JJWT_VERSION}"
    implementation "io.jsonwebtoken:jjwt-impl:${JJWT_VERSION}"
    implementation "io.jsonwebtoken:jjwt-jackson:${JJWT_VERSION}"
    implementation "com.auth0:java-jwt:${AUTH0_JAVA_JWT_VERSION}"
    implementation "com.auth0:java-jwt:$AUTH0_JAVA_JWT_VERSION"

    // Cache
    implementation 'com.github.ben-manes.caffeine:caffeine'

    // Logging
    implementation "org.zalando:logbook-spring-boot-starter:$LOGBOOK_VERSION"
    implementation "org.zalando:logbook-spring-boot-webflux-autoconfigure:$LOGBOOK_VERSION"


    // Payment
    implementation "com.stripe:stripe-java:${STRIPE_VERSION}"

    // Database
    runtimeOnly 'org.mariadb.jdbc:mariadb-java-client'
    implementation 'org.mariadb:r2dbc-mariadb:1.2.2'


    // UTILS
    implementation "org.apache.commons:commons-collections4:$COMMONS_COLLECTIONS_VERSION"
    implementation "io.vavr:vavr:${VAVR_VERSION}"
    implementation "com.github.gavlyukovskiy:p6spy-spring-boot-starter:$SPY_VERSION"

    // Testing
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'io.projectreactor:reactor-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

publishing {
    publications {
        maven(MavenPublication) {
            from components.java
            version = project.version
            artifactId = project.name

            versionMapping {
                usage('java-api') {
                    fromResolutionOf('runtimeClasspath')
                }
                usage('java-runtime') {
                    fromResolutionResult()
                }
            }
            pom {
                name = 'ESN web backend'
                description = 'backend project for esn web'
                inceptionYear.set("2025")
                organization {
                    name.set("Mfataka")
                    url.set("https://mfataka.dev/")
                }
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'https://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
            }
        }
    }
    repositories {
        maven({ ->
            def evn = System.getenv()

            def repoEnv = System.getenv('GITHUB_REPOSITORY') // e.g. "hammafataka/esn-web-backend"
            def (owner, repo) = (repoEnv ?: 'hammafataka/esn-web-backend').toLowerCase().split('/')
            url = uri("https://maven.pkg.github.com/${owner}/${repo}")


            credentials {
                username = evn.getOrDefault("GITHUB_ACTOR", "")
                password = evn.getOrDefault("GITHUB_TOKEN", "")
            }
        })
    }
}


tasks.named('test') {
    useJUnitPlatform()
}
