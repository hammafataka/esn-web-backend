plugins {
    id 'java'
    id 'idea'
    id 'signing'
    id 'groovy'
    id 'application'
    id 'java-library'
    id 'maven-publish'
    id 'io.freefair.lombok' version '8.6'
    id 'org.springframework.boot' version '3.5.4'
    id "com.google.cloud.tools.jib" version "3.4.5"
    id "com.netflix.nebula.release" version "21.0.0"
    id 'io.spring.dependency-management' version '1.1.6'
    id 'io.github.gradle-nexus.publish-plugin' version '2.0.0'
}

group = 'dev.mfataka'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

repositories {
    mavenCentral()
}


dependencies {
    // spring
    implementation 'org.springframework.boot:spring-boot-starter-cache'
    implementation 'org.springframework.boot:spring-boot-starter-mail'
    compileOnly 'com.github.jasync-sql:jasync-mysql:2.2.0'
    implementation 'org.springframework.boot:spring-boot-starter-data-r2dbc'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.security:spring-security-web'
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation "org.springdoc:springdoc-openapi-starter-webmvc-ui:$SPRING_DOC_VERSION"
    implementation 'org.springframework.boot:spring-boot-starter-mail'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'


    // JWT
    implementation "io.jsonwebtoken:jjwt:${JJWT_VERSION}"
    implementation "io.jsonwebtoken:jjwt-api:${JJWT_VERSION}"
    implementation "io.jsonwebtoken:jjwt-impl:${JJWT_VERSION}"
    implementation "io.jsonwebtoken:jjwt-jackson:${JJWT_VERSION}"
    implementation "com.auth0:java-jwt:${AUTH0_JAVA_JWT_VERSION}"
    implementation "com.auth0:java-jwt:$AUTH0_JAVA_JWT_VERSION"

    // Cache
    implementation 'com.github.ben-manes.caffeine:caffeine'

    // Logging
    implementation "org.zalando:logbook-spring-boot-starter:$LOGBOOK_VERSION"
    implementation "org.zalando:logbook-spring-boot-webflux-autoconfigure:$LOGBOOK_VERSION"


    // Payment
    implementation "com.stripe:stripe-java:${STRIPE_VERSION}"

    // Database
    runtimeOnly 'org.mariadb.jdbc:mariadb-java-client'
    implementation 'org.mariadb:r2dbc-mariadb:1.2.2'


    // UTILS
    implementation "org.apache.commons:commons-collections4:$COMMONS_COLLECTIONS_VERSION"
    implementation "io.vavr:vavr:${VAVR_VERSION}"
    implementation "com.github.gavlyukovskiy:p6spy-spring-boot-starter:$SPY_VERSION"

    // Testing
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'io.projectreactor:reactor-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            pom {
                name = 'ESN web backend'
                description = 'backend project for esn web'
                url = 'https://mfataka.dev/'
                licenses {
                    license {
                        name = 'Apache-2.0'
                        url = 'https://www.apache.org/licenses/LICENSE-2.0.txt'
                        distribution = 'repo'
                    }
                }
                developers {
                    developer {
                        id = 'hammafataka'
                        name = 'Hamma Fataka'
                        email = 'hammafataka@yahoo.com'
                    }
                }
                scm {
                    url = 'https://github.com/hammafataka/esn-web-backend'
                    connection = 'scm:git:https://github.com/hammafataka/esn-web-backend.git'
                    developerConnection = 'scm:git:ssh://git@github.com/hammafataka/esn-web-backend.git'
                }
            }
        }
    }
    repositories {
        maven { ->

            def repoEnv = System.getenv('GITHUB_REPOSITORY') // e.g. "hammafataka/esn-web-backend"
            def (owner, repo) = (repoEnv ?: 'hammafataka/esn-web-backend').toLowerCase().split('/')
            name = "GitHubPackages"

            url = uri("https://maven.pkg.github.com/${owner}/${repo}")

            credentials {
                username = System.getenv("GITHUB_ACTOR")
                password = System.getenv("GITHUB_TOKEN")
            }
        }
        maven {

            def containsSnapshot = project.version.toString().contains("snapshot")
            name = containsSnapshot ? "OSSRH_Snapshots" : "OSSRH"

            url = containsSnapshot ? "https://s01.oss.sonatype.org/content/repositories/snapshots/" : "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
            credentials {
                username = System.getenv("MAVEN_USERNAME")
                password = System.getenv("MAVEN_PASSWORD")
            }
        }
    }
}


signing {
    def key = findProperty('signingKey') ?: System.getenv('SIGNING_KEY')
    def pass = findProperty('signingPassword') ?: System.getenv('SIGNING_PASSWORD')
    useInMemoryPgpKeys(key, pass)
    sign publishing.publications.mavenJava
}


jib {
    from {
        image = 'registry.access.redhat.com/ubi8/openjdk-21-runtime:1.23-3'
    }
    to {



        def repoEnv = System.getenv('GITHUB_REPOSITORY')
        image = "ghcr.io/hammafataka/esn-web-backend"

        auth {
            username = System.getenv().getOrDefault("GITHUB_ACTOR", "")
            password = System.getenv().getOrDefault("GITHUB_TOKEN", "")
        }
        def formattedVersion = project.version.toString().replace("+", "_")
        tags = ["latest", formattedVersion]
    }
}
nexusPublishing {
    repositories {
        sonatype {
            username = findProperty('ossrhUsername').toString() ?: System.getenv('OSSRH_USERNAME')
            password = findProperty('ossrhPassword').toString() ?: System.getenv('OSSRH_PASSWORD')
        }
    }
}

tasks.named('test') {
    useJUnitPlatform()
}
